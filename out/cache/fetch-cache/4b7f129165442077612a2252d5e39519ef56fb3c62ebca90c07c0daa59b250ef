{"kind":"FETCH","data":{"headers":{"access-control-allow-credentials":"true","access-control-allow-origin":"","connection":"keep-alive","content-length":"29777","content-security-policy":"connect-src 'self' https:;img-src 'self' data: blob: https://market-assets.strapi.io;media-src 'self' data: blob:;default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline'","content-type":"application/json; charset=utf-8","date":"Sat, 14 Sep 2024 05:05:33 GMT","keep-alive":"timeout=5","referrer-policy":"no-referrer","strict-transport-security":"max-age=31536000; includeSubDomains","vary":"Origin","x-content-type-options":"nosniff","x-dns-prefetch-control":"off","x-download-options":"noopen","x-frame-options":"SAMEORIGIN","x-permitted-cross-domain-policies":"none","x-powered-by":"Strapi <strapi.io>"},"body":"","status":200,"url":"http://localhost:1337/api/posts?locale=en&fields[0]=slug&fields[1]=title&fields[2]=description&fields[3]=publishedAt&fields[4]=body&populate[createdBy]=true&populate[image][fields][0]=url&populate[image][populate]=%2A&sort[0]=publishedAt%3Adesc&pagination[pageSize]=6"},"revalidate":31536000,"tags":[]}