{
  "data": [
    {
      "id": 3,
      "attributes": {
        "slug": "apa-itu-proses-diffing",
        "title": "Apa itu proses Diffing",
        "description": "Proses diffing di react benar benar unik yang dimana react menginstruksikan pada browser",
        "publishedAt": "2024-09-10T15:27:18.389Z",
        "body": "##  Mengintip Aksi Diffing di Balik Layar! 🕵️‍♀️\n\nHalo lagi, para developer! 👋  Siap melihat bagaimana algoritma **Diffing** bekerja dalam praktiknya? Yuk, kita simak contoh kasus yang simpel namun mencerahkan! ✨\n\n**Bayangkan kita punya dua Virtual DOM:**\n\n**Versi 1:**\n\n```html\n<ul>\n  <li>Belajar HTML</li>\n  <li>Belajar CSS</li>\n</ul>\n```\n\n**Versi 2:**\n\n```html\n<ul>\n  <li>Belajar HTML</li>\n  <li>Belajar CSS</li>\n  <li>Belajar JavaScript</li>\n</ul>\n```\n\n**Pertanyaannya:**  Bagaimana caranya agar browser kita bisa menampilkan perubahan ini seefisien mungkin, tanpa harus me-render ulang seluruh daftar? 🤔\n\nDi sinilah **Diffing** unjuk gigi! 💪  Alih-alih memperlakukan kedua versi sebagai entitas yang sama sekali berbeda, algoritma **Diffing** akan menganalisisnya secara cerdas dan menemukan perbedaan yang tepat:\n\n1. **Tree Reconciliation:** Algoritma **Diffing** akan membandingkan kedua struktur pohon Virtual DOM ini secara level per level:\n\n   ![Diffing Illustration 1](https://i.imgur.com/V9tHn3I.png)\n\n   -  Pada level pertama, kedua versi memiliki elemen `<ul>`. 👍\n   -  Pada level kedua,  kedua versi memiliki dua elemen `<li>` pertama yang identik. 👍\n   -  Perbedaan terdeteksi! Versi 2 memiliki elemen `<li>` tambahan: \"Belajar JavaScript\". \n\n2. **Minimal Update:** Berdasarkan hasil analisis, algoritma **Diffing** akan menginstruksikan browser untuk:\n   -  Membiarkan dua elemen `<li>` pertama apa adanya (karena tidak berubah).\n   -  Menambahkan elemen `<li>` baru \"Belajar JavaScript\" ke dalam daftar.\n\n**Hasilnya?**  Browser dapat memperbarui tampilan dengan sangat efisien, hanya dengan menambahkan elemen baru tanpa harus me-render ulang seluruh daftar.  ⚡️\n\n**Keuntungan Diffing:**\n\n- **Performa:**  Mempercepat pembaruan UI dengan hanya mengubah elemen yang diperlukan.\n- **User Experience:** Menghindari tampilan yang berkedip atau \"reload\" yang mengganggu.\n- **Efisiensi Kode:** Memudahkan developer untuk fokus pada logika aplikasi tanpa harus memikirkan detail manipulasi DOM.\n\n**Ingat:**  Contoh ini sangat sederhana untuk menggambarkan konsep dasar. Dalam aplikasi nyata, algoritma **Diffing** bekerja dengan struktur data yang jauh lebih kompleks. Namun, prinsip dasar dan tujuannya tetap sama:  **mengidentifikasi perubahan dengan cerdas dan memperbarui tampilan seefisien mungkin.** 🚀 \n\nSemoga penjelasan ini memberikan gambaran yang lebih jelas tentang keajaiban **Diffing** di balik layar aplikasi web modern! 😉 \n",
        "image": {
          "data": {
            "id": 2,
            "attributes": {
              "url": "/uploads/Group_2_2_4bb0395ba3.jpg"
            }
          }
        },
        "createdBy": {
          "id": 1,
          "firstname": "Prabowo",
          "lastname": "Sakti"
        }
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 1
    }
  }
}